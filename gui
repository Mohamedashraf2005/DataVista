import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import pandas as pd
from pandastable import Table
from tkinter.scrolledtext import ScrolledText

class DataAnalysisApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Data Analysis Tool")
        self.root.geometry("1600x1200")
        self.root.configure(bg="white")
        
        # Initialize data variables
        self.df = None
        self.file_path = ""
        self.dataset_name = "No dataset loaded"  # Initialize here before use
        
        # Create notebook for tabs
        self.notebook = ttk.Notebook(root)
        self.notebook.pack(fill='both', expand=True)
        
        # Create tabs
        self.create_dataset_tab()
        self.create_eda_tab()
        self.create_ml_tab()
        self.create_about_tab()
        
    def create_dataset_tab(self):
        # Dataset tab
        self.dataset_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.dataset_tab, text="DataSet")
        
        # Left panel - Data display and filters
        left_panel = ttk.Frame(self.dataset_tab)
        left_panel.pack(side='left', fill='both', expand=True, padx=10, pady=10)
        
        # Dataset name
        self.dataset_name_label = ttk.Label(left_panel, text=self.dataset_name, font=('Segoe UI', 14))
        self.dataset_name_label.pack(anchor='w', pady=(10, 5))
        
        # Scrollable data display
        self.data_frame = ttk.Frame(left_panel)
        self.data_frame.pack(fill='both', expand=True)
        
        # Filter options
        filter_frame = ttk.Frame(left_panel)
        filter_frame.pack(fill='x', pady=10)
        
        ttk.Label(filter_frame, text="Choose and apply filter to columns").pack(side='left', padx=5)
        self.filter_options = ttk.Combobox(filter_frame, values=["No filter", "Numeric only", "Categorical only"])
        self.filter_options.pack(side='left', padx=5)
        self.filter_options.set("No filter")
        
        # Right panel - Dataset summary
        right_panel = ttk.Frame(self.dataset_tab)
        right_panel.pack(side='right', fill='both', expand=True, padx=10, pady=10)
        
        # Summary sections
        self.summary_labels = {}
        summary_sections = [
            "Overview", "Shape", "Missing Values", 
            "Duplicates", "Data Types", "Stats", 
            "Unique Values", "Critical Columns"
        ]
        
        for section in summary_sections:
            section_frame = ttk.LabelFrame(right_panel, text=section)
            section_frame.pack(fill='x', pady=5)
            self.summary_labels[section] = ttk.Label(section_frame, text="Not available", wraplength=300)
            self.summary_labels[section].pack(anchor='w', padx=5, pady=2)
        
        # Load data button
        load_btn = ttk.Button(self.dataset_tab, text="Load Dataset", command=self.load_dataset)
        load_btn.pack(side='bottom', pady=10)
    
    def create_eda_tab(self):
        # EDA tab
        self.eda_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.eda_tab, text="EDA")
        
        # Placeholder content
        ttk.Label(self.eda_tab, text="Exploratory Data Analysis Tools", font=('Segoe UI', 16)).pack(pady=20)
        
        # Visualization options
        viz_frame = ttk.Frame(self.eda_tab)
        viz_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        viz_options = ["Histogram", "Box Plot", "Scatter Plot", "Correlation Matrix", "Pair Plot"]
        for i, option in enumerate(viz_options):
            btn = ttk.Button(viz_frame, text=option)
            btn.grid(row=i//3, column=i%3, padx=10, pady=10, sticky='nsew')
            viz_frame.grid_columnconfigure(i%3, weight=1)
        
        # Output area
        self.eda_output = ScrolledText(self.eda_tab, height=10)
        self.eda_output.pack(fill='both', expand=True, padx=20, pady=10)
    
    def create_ml_tab(self):
        # ML Model tab
        self.ml_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.ml_tab, text="ML Model")
        
        # Model selection
        ttk.Label(self.ml_tab, text="Machine Learning Model Training", font=('Segoe UI', 16)).pack(pady=20)
        
        model_frame = ttk.Frame(self.ml_tab)
        model_frame.pack(fill='x', padx=20, pady=10)
        
        ttk.Label(model_frame, text="Select Model:").pack(side='left', padx=5)
        self.model_selector = ttk.Combobox(model_frame, values=[
            "Linear Regression", "Logistic Regression", "Decision Tree", 
            "Random Forest", "SVM", "Neural Network"
        ])
        self.model_selector.pack(side='left', padx=5, fill='x', expand=True)
        
        # Feature/target selection
        feature_frame = ttk.Frame(self.ml_tab)
        feature_frame.pack(fill='x', padx=20, pady=10)
        
        ttk.Label(feature_frame, text="Features:").pack(side='left', padx=5)
        self.feature_selector = tk.Listbox(feature_frame, selectmode='multiple', height=4)
        self.feature_selector.pack(side='left', padx=5, fill='x', expand=True)
        
        ttk.Label(feature_frame, text="Target:").pack(side='left', padx=5)
        self.target_selector = ttk.Combobox(feature_frame)
        self.target_selector.pack(side='left', padx=5, fill='x', expand=True)
        
        # Train button
        train_btn = ttk.Button(self.ml_tab, text="Train Model")
        train_btn.pack(pady=10)
        
        # Results area
        self.ml_output = ScrolledText(self.ml_tab, height=10)
        self.ml_output.pack(fill='both', expand=True, padx=20, pady=10)
    
    def create_about_tab(self):
        # About tab (optional)
        self.about_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.about_tab, text="About Project")
        
        # Project information
        ttk.Label(self.about_tab, text="About This Project", font=('Segoe UI', 16)).pack(pady=20)
        
        about_text = """
       DA project
        """
        
        ttk.Label(self.about_tab, text=about_text, justify='left').pack(pady=10, padx=20)
    
    def load_dataset(self):
        # Open file dialog to select dataset
        self.file_path = filedialog.askopenfilename(
            filetypes=[("CSV Files", "*.csv"), ("Excel Files", "*.xlsx"), ("All Files", "*.*")]
        )
        
        if not self.file_path:
            return
            
        try:
            # Extract dataset name from file path
            self.dataset_name = self.file_path.split("/")[-1].split(".")[0]
            self.dataset_name_label.config(text=self.dataset_name)
            
            if self.file_path.endswith('.csv'):
                self.df = pd.read_csv(self.file_path)
            elif self.file_path.endswith('.xlsx'):
                self.df = pd.read_excel(self.file_path)
            
            # Display data and update summaries
            self.display_data()
            self.update_summary()
            self.update_ml_selectors()
            
            messagebox.showinfo("Success", "Dataset loaded successfully!")
            
        except Exception as e:
            messagebox.showerror("Error", f"Failed to load dataset: {str(e)}")
    
    def display_data(self):
        # Clear previous data display
        for widget in self.data_frame.winfo_children():
            widget.destroy()
        
        # Create a pandastable to display the dataframe
        pt = Table(self.data_frame, dataframe=self.df.head(100), showtoolbar=True, showstatusbar=True)
        pt.show()
    
    def update_summary(self):
        """Update all summary information in the dataset tab"""
        if self.df is not None:
            # Overview
            self.summary_labels["Overview"].config(text=f"Source: {self.file_path}")
            
            # Shape
            self.summary_labels["Shape"].config(text=f"Rows: {self.df.shape[0]}, Columns: {self.df.shape[1]}")
            
            # Missing Values
            null_counts = self.df.isnull().sum()
            null_pct = (null_counts / len(self.df)) * 100
            missing_text = "\n".join([f"{col}: {null_counts[col]} ({null_pct[col]:.1f}%)" 
                                     for col in null_counts[null_counts > 0].index])
            self.summary_labels["Missing Values"].config(text=missing_text or "No missing values")
            
            # Duplicates
            dupes = self.df.duplicated().sum()
            self.summary_labels["Duplicates"].config(text=f"Total duplicated rows: {dupes}")
            
            # Data Types
            dtypes = self.df.dtypes.astype(str)
            dtype_text = "\n".join([f"{col}: {dtypes[col]}" for col in dtypes.index])
            self.summary_labels["Data Types"].config(text=dtype_text)
            
            # Stats (for numerical columns)
            num_cols = self.df.select_dtypes(include=['number']).columns
            if not num_cols.empty:
                stats = self.df[num_cols].describe().transpose()
                stats_text = "\n".join([
                    f"{col}: mean={stats.loc[col, 'mean']:.2f}, median={stats.loc[col, '50%']:.2f}, "
                    f"std={stats.loc[col, 'std']:.2f}, min={stats.loc[col, 'min']:.2f}, "
                    f"max={stats.loc[col, 'max']:.2f}"
                    for col in stats.index
                ])
                self.summary_labels["Stats"].config(text=stats_text)
            else:
                self.summary_labels["Stats"].config(text="No numerical columns")
            
            # Unique Values (for categorical columns)
            cat_cols = self.df.select_dtypes(include=['object', 'category']).columns
            if not cat_cols.empty:
                unique_text = "\n".join([f"{col}: {self.df[col].nunique()} unique values" 
                                       for col in cat_cols])
                self.summary_labels["Unique Values"].config(text=unique_text)
            else:
                self.summary_labels["Unique Values"].config(text="No categorical columns")
            
            # Critical Columns
            high_missing = null_pct[null_pct > 30].index.tolist()
            critical_text = "High missing values (>30%): " + (", ".join(high_missing) if high_missing else "None")
            self.summary_labels["Critical Columns"].config(text=critical_text)
    
    def update_ml_selectors(self):
        # Update feature and target selectors in ML tab
        self.feature_selector.delete(0, tk.END)
        self.target_selector['values'] = []
        
        if self.df is not None:
            for col in self.df.columns:
                self.feature_selector.insert(tk.END, col)
            
            self.target_selector['values'] = list(self.df.columns)

# Main application
if __name__ == "__main__":
    root = tk.Tk()
    app = DataAnalysisApp(root)
    root.mainloop()
