import tkinter as tk
from tkinter import filedialog, messagebox
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

class DataApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Your Data, Our Intelligence")
        self.geometry("1000x600")
        self.configure(bg='#f9f9f9')
        self.data = None

        self.frames = {}

        for F in (UploadPage, SuccessPage, DashboardPage):
            page_name = F.__name__
            frame = F(parent=self, controller=self)
            self.frames[page_name] = frame
            frame.place(relwidth=1, relheight=1)

        self.show_frame("UploadPage")

    def show_frame(self, page_name):
        frame = self.frames[page_name]
        frame.tkraise()


class UploadPage(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent, bg='#f9f9f9')
        self.controller = controller

        box = tk.Frame(self, bg='white', padx=40, pady=30, bd=1, relief='solid', highlightbackground="#e0e0e0")
        box.place(relx=0.5, rely=0.5, anchor='center')

        tk.Label(box, text="Your Data, Our Intelligence",
                 font=("Helvetica", 20, "bold"),
                 fg="#333333", bg="white").pack(pady=10)

        tk.Button(box, text="Upload your DataSet", command=self.upload_file,
                  bg="#b7e4c7", fg="#333333", padx=10, pady=5).pack(pady=10)

        tk.Label(box, text="Supports: .csv, .xlsx", bg="white",
                 font=("Helvetica", 10), fg="#888888").pack(pady=5)

    def upload_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("CSV files", "*.csv"), ("Excel files", "*.xlsx")])
        if file_path:
            try:
                if file_path.endswith('.csv'):
                    self.controller.data = pd.read_csv(file_path)
                else:
                    self.controller.data = pd.read_excel(file_path)
                self.controller.show_frame("SuccessPage")
            except Exception as e:
                messagebox.showerror("Error", str(e))


class SuccessPage(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent, bg='#f9f9f9')
        self.controller = controller

        box = tk.Frame(self, bg='white', padx=30, pady=30, bd=1, relief='solid')
        box.place(relx=0.5, rely=0.5, anchor='center')

        tk.Label(box, text="âœ… Uploaded successfully",
                 font=("Helvetica", 16),
                 bg="white", fg="green").pack(pady=10)

        tk.Button(box, text="Continue", command=lambda: controller.show_frame("DashboardPage"),
                  bg="#8ecae6", fg="#333333", padx=15, pady=5).pack(pady=5)


class DashboardPage(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller
        self.configure(bg='#ffffff')

        # Side panel
        side_frame = tk.Frame(self, bg="#eaf4f4")
        side_frame.place(x=0, y=0, width=200, height=600)

        tk.Label(side_frame, text="ðŸ“Š Options", font=("Helvetica", 14, "bold"), bg="#eaf4f4", fg="#333333").pack(pady=10)

        options = [
            ("Show Histogram", self.show_hist),
            ("Show Heatmap", self.show_heatmap),
            ("Show Pairplot", self.show_pairplot),
            ("Show Barchart", self.show_barchart),
        ]

        for name, command in options:
            tk.Button(side_frame, text=name, command=command,
                      bg="#ffffff", fg="#0077b6", activebackground="#d9f0ff",
                      width=20, relief='ridge').pack(pady=5)

        self.canvas = tk.Frame(self, bg="#ffffff")
        self.canvas.place(x=200, y=0, width=800, height=600)

    def show_hist(self):
        self.clear_canvas()
        data = self.controller.data
        numeric_cols = data.select_dtypes(include=['float64', 'int64']).columns

        for i, col in enumerate(numeric_cols[:8]):
            plt.figure()
            sns.histplot(data[col], kde=False, color="#90e0ef")
            plt.title(f"Histogram - {col}")
            plt.show()

    def show_heatmap(self):
        self.clear_canvas()
        data = self.controller.data
        plt.figure(figsize=(10, 6))
        sns.heatmap(data.corr(), annot=True, cmap='crest')
        plt.title("Correlation Heatmap")
        plt.show()

    def show_pairplot(self):
        self.clear_canvas()
        data = self.controller.data
        sns.pairplot(data.select_dtypes(include=['float64', 'int64']))
        plt.suptitle("Pairplot", y=1.02)
        plt.show()

    def show_barchart(self):
        self.clear_canvas()
        data = self.controller.data
        cat_cols = data.select_dtypes(include='object').columns
        if not cat_cols.empty:
            col = cat_cols[0]
            data[col].value_counts().plot(kind='bar', color='#b7e4c7')
            plt.title(f"Bar chart - {col}")
            plt.show()
        else:
            messagebox.showinfo("No Categories", "No categorical column found.")

    def clear_canvas(self):
        for widget in self.canvas.winfo_children():
            widget.destroy()


if __name__ == "__main__":
    app = DataApp()
    app.mainloop()
